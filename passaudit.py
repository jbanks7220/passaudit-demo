#!/usr/bin/env python3
"""
passaudit.py — Educational Password Audit Tool
Author: Jamir Banks
License: MIT
----------------------------------------------
This tool demonstrates ethical password auditing
for educational purposes only.

It evaluates password strength and simulates a hash
dictionary check using common weak passwords.

⚠️ Use responsibly. Do not test real or unauthorized credentials.
"""

import argparse
import hashlib
import json
import re
from datetime import datetime
from pathlib import Path

# -----------------------------
# Utility Functions
# -----------------------------

def estimate_strength(password: str) -> dict:
    """Estimate password strength using basic entropy-like rules."""
    length = len(password)
    complexity = 0
    if re.search(r'[a-z]', password): complexity += 1
    if re.search(r'[A-Z]', password): complexity += 1
    if re.search(r'\d', password): complexity += 1
    if re.search(r'[^A-Za-z0-9]', password): complexity += 1

    score = min(length / 2 + complexity * 2, 10)
    verdict = (
        "Very Weak" if score < 3 else
        "Weak" if score < 5 else
        "Moderate" if score < 7 else
        "Strong" if score < 9 else
        "Very Strong"
    )

    return {
        "password": password,
        "length": length,
        "complexity_level": complexity,
        "score": round(score, 1),
        "verdict": verdict
    }

def hash_password(password: str, algorithm: str = "sha256") -> str:
    """Return the hash of a password using the selected algorithm."""
    try:
        h = hashlib.new(algorithm)
    except ValueError:
        print(f"[!] Unsupported hash algorithm: {algorithm}. Defaulting to sha256.")
        h = hashlib.sha256()
    h.update(password.encode())
    return h.hexdigest()

def load_file(file_path: str) -> list:
    """Load a text file as a list of stripped lines."""
    path = Path(file_path)
    if not path.exists():
        print(f"[!] File not found: {file_path}")
        return []
    with open(file_path, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

def check_hashes(hash_list: list, wordlist: list, algorithm: str) -> list:
    """Attempt to match known weak hashes from a wordlist."""
    cracked = []
    for word in wordlist:
        hashed_word = hash_password(word, algorithm)
        if hashed_word in hash_list:
            cracked.append({"password": word, "hash": hashed_word})
    return cracked

# -----------------------------
# Report Generators
# -----------------------------

def save_json(data: dict, filename: str):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)
    print(f"[+] JSON report saved: {filename}")

def save_html(data: dict, filename: str):
    html = [
        "<!DOCTYPE html>",
        "<html><head><meta charset='UTF-8'>",
        "<title>Password Audit Report</title>",
        "<style>",
        "body { font-family: Arial, sans-serif; margin: 2em; background: #fafafa; }",
        "h1 { color: #333; }",
        "table { border-collapse: collapse; width: 100%; margin-bottom: 2em; }",
        "th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }",
        "th { background: #f2f2f2; }",
        ".weak { background: #ffe5e5; }",
        ".strong { background: #e5ffe5; }",
        "</style></head><body>",
        f"<h1>Password Audit Report</h1>",
        f"<p><b>Generated:</b> {data['timestamp']}</p>"
    ]

    if "plaintext_audit" in data["results"]:
        html.append("<h2>Plaintext Password Strength</h2>")
        html.append("<table><tr><th>Password</th><th>Length</th><th>Complexity</th><th>Score</th><th>Verdict</th></tr>")
        for entry in data["results"]["plaintext_audit"]:
            css_class = "weak" if entry["score"] < 5 else "strong" if entry["score"] >= 8 else ""
            html.append(
                f"<tr class='{css_class}'><td>{entry['password']}</td>"
                f"<td>{entry['length']}</td>"
                f"<td>{entry['complexity_level']}</td>"
                f"<td>{entry['score']}</td>"
                f"<td>{entry['verdict']}</td></tr>"
            )
        html.append("</table>")

    if "hash_audit" in data["results"]:
        html.append("<h2>Weak Hash Matches</h2>")
        html.append("<table><tr><th>Password</th><th>Hash</th></tr>")
        for cracked in data["results"]["hash_audit"]:
            html.append(f"<tr><td>{cracked['password']}</td><td>{cracked['hash']}</td></tr>")
        html.append("</table>")

    html.append("<hr><p><i>This report was generated by passaudit.py for educational use only.</i></p>")
    html.append("</body></html>")

    with open(filename, "w", encoding="utf-8") as f:
        f.write("\n".join(html))
    print(f"[+] HTML report saved: {filename}")

def save_markdown(data: dict, filename: str):
    lines = [
        "# Password Audit Report",
        f"**Generated:** {data['timestamp']}\n"
    ]

    if "plaintext_audit" in data["results"]:
        lines.append("## Plaintext Password Strength\n")
        lines.append("| Password | Length | Complexity | Score | Verdict |")
        lines.append("|-----------|--------|-------------|--------|----------|")
        for entry in data["results"]["plaintext_audit"]:
            lines.append(f"| {entry['password']} | {entry['length']} | {entry['complexity_level']} | {entry['score']} | {entry['verdict']} |")
        lines.append("")

    if "hash_audit" in data["results"]:
        lines.append("## Weak Hash Matches\n")
        lines.append("| Password | Hash |")
        lines.append("|-----------|------|")
        for cracked in data["results"]["hash_audit"]:
            lines.append(f"| {cracked['password']} | {cracked['hash']} |")
        lines.append("")

    lines.append("\n*This report was generated by passaudit.py for educational use only.*")

    with open(filename, "w", encoding="utf-8") as f:
        f.write("\n".join(lines))
    print(f"[+] Markdown report saved: {filename}")

# -----------------------------
# Main
# -----------------------------

def main():
    parser = argparse.ArgumentParser(description="Educational Password Audit Tool (for demo use)")
    parser.add_argument("--input", help="File containing plaintext passwords")
    parser.add_argument("--hashes", help="File containing hashed passwords")
    parser.add_argument("--wordlist", help="File containing weak password list")
    parser.add_argument("--algo", default="sha256", help="Hash algorithm (default: sha256)")
    parser.add_argument("--report", default="audit_report", help="Base name for output reports (no extension)")

    args = parser.parse_args()

    audit_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    report_data = {"timestamp": audit_time, "results": {}}

    if args.input:
        print("[*] Auditing plaintext passwords...")
        passwords = load_file(args.input)
        strengths = [estimate_strength(p) for p in passwords]
        report_data["results"]["plaintext_audit"] = strengths
        print(f"[+] {len(strengths)} passwords analyzed.")

    if args.hashes and args.wordlist:
        print("[*] Checking hashed passwords against weak list...")
        hash_list = load_file(args.hashes)
        weak_words = load_file(args.wordlist)
        cracked = check_hashes(hash_list, weak_words, args.algo)
        report_data["results"]["hash_audit"] = cracked
        print(f"[+] {len(cracked)} weak hashes identified.")

    # Generate reports in three formats
    save_json(report_data, f"{args.report}.json")
    save_html(report_data, f"{args.report}.html")
    save_markdown(report_data, f"{args.report}.md")

    print("\nAudit complete.")
    print("Reminder: This tool is for educational testing only.\n")

if __name__ == "__main__":
    main()
